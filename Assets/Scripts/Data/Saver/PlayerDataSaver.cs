using UnityEngine;
using Newtonsoft.Json;
using System.IO;
using System.Security.Cryptography;
using System.Text;
using System;
using ToonJido.Data.Model;

namespace ToonJido.Data.Saver
{
    public class PlayerDataSaver : IDisposable
    {
        private const string tokenPW = "rmdwjd17!!";
        private readonly string dataPath = Path.Combine(Application.persistentDataPath, "token.txt");
        private readonly string userInfoPath = Path.Combine(Application.persistentDataPath, "playerInfo.json");


        private bool disposedValue;

        private byte[] buffer = new byte[1024];

        public void SavePlayerInfo(User user)
        {
            string saveData = JsonConvert.SerializeObject(user);
            File.WriteAllTextAsync(userInfoPath, saveData);
        }


        public async void SaveToken(string token)
        {
            byte[] bytes = Encoding.UTF8.GetBytes(token);
            var encToken = Encrypt(bytes, tokenPW);

            using (FileStream outputFile = new FileStream(dataPath, FileMode.OpenOrCreate))
            {
                await outputFile.WriteAsync(encToken);
            }
        }

        public string LoadToken()
        {
            byte[] bytes;

            using(FileStream loadFile = new FileStream(dataPath, FileMode.Open))
            {
                using (BinaryReader reader = new BinaryReader(loadFile))
                {
                    bytes = reader.ReadBytes(1024);
                }
            }

            bytes = Decrypt(bytes, tokenPW);

            return Encoding.UTF8.GetString(bytes);
        }


        public byte[] Encrypt(byte[] origin, string password)
        {
            RijndaelManaged aes = new RijndaelManaged();       //AES ???????
            Rfc2898DeriveBytes key = CreateKey(password);            //??? ????
            Rfc2898DeriveBytes vector = CreateVector("ZaWmAcu1C2fbgJa4cPuZrT6MhuWmx6GE");   //???? ???? 

            aes.BlockSize = 128;            //AES?? ???? ???? 128 ???????.
            aes.KeySize = 256;              //AES?? ? ???? 128, 192, 256?? ???????.
            aes.Mode = CipherMode.CBC;
            aes.Padding = PaddingMode.PKCS7;
            aes.Key = key.GetBytes(32);     //AES-256?? ??????? ????? ????? 32???? ???.
            aes.IV = vector.GetBytes(16);   //???? ????? ?????? ????? 16???? ???.

            //????? ???? ????? ??????? ???? ????? ??? ????? ?????? ????
            ICryptoTransform encryptor = aes.CreateEncryptor(aes.Key, aes.IV);

            //using???????? ?????? ?????? ??????? ????? ??????? ?????? ???????ùù??? ???. 
            using (MemoryStream ms = new MemoryStream()) //????? ???? ????? 
            {
                //encryptor ???????? ?????? ??????? ????? ???? ?????
                using (CryptoStream cs = new CryptoStream(ms, encryptor, CryptoStreamMode.Write))
                {
                    cs.Write(origin, 0, origin.Length);
                }
                return ms.ToArray();    //?????? ????? ?ùù ???
            }
        }

        public byte[] Decrypt(byte[] origin, string password)
        {
            RijndaelManaged aes = new RijndaelManaged();       //AES ???????
            Rfc2898DeriveBytes key = CreateKey(password);            //??? ????
            Rfc2898DeriveBytes vector = CreateVector("ZaWmAcu1C2fbgJa4cPuZrT6MhuWmx6GE");   //???? ???? 

            aes.BlockSize = 128;            //AES?? ???? ???? 128 ???????.
            aes.KeySize = 256;              //AES?? ? ???? 128, 192, 256?? ???????.
            aes.Mode = CipherMode.CBC;
            aes.Padding = PaddingMode.PKCS7;
            aes.Key = key.GetBytes(32);     //AES-256?? ??????? ????? ????? 32???? ???.
            aes.IV = vector.GetBytes(16);   //???? ????? ?????? ????? 16???? ???.

            //????? ???? ????? ??????? ???? ????? ??? ????? ?????? ????
            ICryptoTransform decryptor = aes.CreateDecryptor(aes.Key, aes.IV);

            //using???????? ?????? ?????? ??????? ????? ??????? ?????? ???????ùù??? ???. 
            using (MemoryStream ms = new MemoryStream()) //????? ???? ????? 
            {
                //encryptor ???????? ?????? ??????? ????? ???? ?????
                using (CryptoStream cs = new CryptoStream(ms, decryptor, CryptoStreamMode.Write))
                {
                    cs.Write(origin, 0, origin.Length);
                }
                return ms.ToArray();    //?????? ????? ?ùù ???
            }
        }


        public Rfc2898DeriveBytes CreateKey(string password)
        {
            byte[] keyBytes = Encoding.UTF8.GetBytes(password);         //??? ????
            byte[] saltBytes = SHA512.Create().ComputeHash(keyBytes);   //?????(???? ????? ??? ???? ??? ??)

            Rfc2898DeriveBytes result = new Rfc2898DeriveBytes(keyBytes, saltBytes, 10);    //????? ??????? ????? ???ùù? ? ????, ???????? ????? ???? ??? ?????? ??? ??????.

            return result;  //??? ???
        }

        public Rfc2898DeriveBytes CreateVector(string vector)
        {
            byte[] vectorBytes = Encoding.UTF8.GetBytes(vector);        //???? ????
            byte[] saltBytes = SHA512.Create().ComputeHash(vectorBytes);   //?????(???? ????? ??? ???? ??? ??)

            Rfc2898DeriveBytes result = new Rfc2898DeriveBytes(vectorBytes, saltBytes, 10);    //????? ??????? ????? ???ùù? ? ????, ???????? ????? ???? ??? ?????? ??? ??????.

            return result;  //???? ???
        }

        protected virtual void Dispose(bool disposing)
        {
            if (!disposedValue)
            {
                if (disposing)
                {
                    // TODO: ?????? ????(?????? ???)?? ????????.
                }

                // TODO: ??????? ?????(??????? ???)?? ??????? ??????? ??????????.
                // TODO: ? ??? null?? ????????.
                disposedValue = true;
            }
        }

        // // TODO: ??????? ??????? ??????? ??? 'Dispose(bool disposing)'?? ????? ??ùù?? ??????? ??????????.
        // ~PlayerDataSaver()
        // {
        //     // ?? ??? ???????? ??????. 'Dispose(bool disposing)' ????? ???? ??? ???????.
        //     Dispose(disposing: false);
        // }

        public void Dispose()
        {
            // ?? ??? ???????? ??????. 'Dispose(bool disposing)' ????? ???? ??? ???????.
            Dispose(disposing: true);
            GC.SuppressFinalize(this);
        }
    }
}